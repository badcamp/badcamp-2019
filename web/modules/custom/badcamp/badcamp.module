<?php

/**
 * @file
 * Contains badcamp.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\Entity\Node;
use Drupal\views\Views;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_help().
 */
function badcamp_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the badcamp module.
    case 'help.page.badcamp':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('BADCamp Helper Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_form_node_job_posting_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $nodeForm = $form_state->getBuildInfo()['callback_object'];
  $node = $nodeForm->getEntity();

  $options =& $form['field_sponsor']['widget']['#options'];
  foreach ($options AS $nid => $option) {
    if ($nid !== '_none' && !\Drupal::entityTypeManager()->getStorage('node')->load($nid)->access('update')) {
      unset($options[$nid]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_form_node_session_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $nodeForm = $form_state->getBuildInfo()['callback_object'];
  $node = $nodeForm->getEntity();
  if ($node->isNew()) {
    $form['#title'] = t('Submit A Session');
    $form['actions']['submit']['#value'] = t('Submit');
  }
  $form['body']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_form_payment_badcamp_payment_sponsorship_payment_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $buildInfo = $form_state->getBuildInfo();
  /** @var \Drupal\payment_form\Entity\Payment\PaymentForm $callbackObject */
  $callbackObject = $buildInfo['callback_object'];
  /** @var \Drupal\payment\Entity\PaymentInterface $payment */
  $payment = $callbackObject->getEntity();

  if ($payment->getAmount() < 100) {
    $form['field_hoodie_size']['#required'] = FALSE;
    $form['field_hoodie_size']['#access'] = FALSE;
  }

  if ($payment->getAmount() < 25) {
    $form['field_tshirt_size']['#required'] = FALSE;
    $form['field_tshirt_size']['#access'] = FALSE;
  }

  $form['actions']['submit']['#submit'][] = 'badcamp_payment_sponsorship_submit';
  $form['actions']['submit']['#ajax'] = [
    'callback' => 'badcamp_payment_sponsorship_submit_ajax',
    'event' => 'click',
  ];
  $form['actions']['submit']['#attributes'] = ['class' => ['use-ajax-submit']];

  $form['#prefix'] = '<div id="payment_form">';
  $form['#suffix'] = '</div>';

  $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_form_payment_badcamp_payment_training_payment_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#ajax'] = [
    'callback' => 'badcamp_payment_training_submit_ajax',
    'event' => 'click',
  ];

  $form['field_training']['widget'][0]['target_id']['#attributes']['readonly'] = 'readonly';

  if (isset($_GET['entity_id'])) {
    // Get the training
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($_GET['entity_id']);
    $form['field_training']['widget'][0]['target_id']['#default_value'] = $node;
  }
  else {
    drupal_set_message(t('Training Must Be Set By Reference.'), 'error');
  }

  $form['actions']['submit']['#attributes'] = ['class' => ['use-ajax-submit']];

  $form['#prefix'] = '<div id="payment_form">';
  $form['#suffix'] = '</div>';

  $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function badcamp_form_payment_badcamp_payment_organization_sponsorship_payment_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'badcamp_payment_sponsorship_submit';
  $form['actions']['submit']['#ajax'] = [
    'callback' => 'badcamp_payment_sponsorship_submit_ajax',
    'event' => 'click',
  ];
  $form['actions']['submit']['#attributes'] = ['class' => ['use-ajax-submit']];

  $form['#prefix'] = '<div id="payment_form">';
  $form['#suffix'] = '</div>';

  $form['#attached']['library'][] = 'core/drupal.dialog.ajax';
}

/**
 * Submit handler
 *
 * @see badcamp_form_payment_badcamp_payment_sponsorship_payment_form_form_alter().
 */
function badcamp_payment_sponsorship_submit($form, FormStateInterface $form_state) {
  $buildInfo = $form_state->getBuildInfo();
  /** @var \Drupal\payment_form\Entity\Payment\PaymentForm $callbackObject */
  $callbackObject = $buildInfo['callback_object'];
  /** @var \Drupal\payment\Entity\PaymentInterface $payment */
  $payment = $callbackObject->getEntity();

  if (($redirect_value = $payment->redirectDestination) != '') {
    $form_state->setRedirectUrl(Url::fromUserInput($redirect_value));
    $form_state->setProgrammed(FALSE);
    $form_state->disableRedirect(FALSE);
    $form_state->setRebuild(FALSE);
  }
}

/**
 * Submit handler.
 *
 * @see badcamp_form_payment_badcamp_payment_sponsorship_payment_form_form_alter().
 */
function badcamp_payment_sponsorship_submit_ajax($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
    $form['messages'] = [
      '#type' => 'status_messages',
      '#prefix' => '<div id="messages">',
      '#suffix' => '</div>',
    ];
    $response->addCommand(new ReplaceCommand('#payment_form', $form));
  }
  else {
    /** @var \Drupal\Core\Url $redirect */
    if (($redirect = $form_state->getRedirect()) !== FALSE) {
      $response->addCommand(new OpenModalDialogCommand("Thank You!", "Thank you for your payment!", ['width' => 800]));
      $response->addCommand(new RedirectCommand($redirect->toString()));
    } else {
      $response->addCommand(new OpenModalDialogCommand("Success!", 'The form has been submitted.', ['width' => 800]));
    }
  }
  return $response;
}

/**
 * Submit handler.
 *
 * @see badcamp_form_payment_badcamp_payment_training_payment_form_form_alter().
 */
function badcamp_payment_training_submit_ajax($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();

  // If there are any form errors, re-display the form.
  if ($form_state->hasAnyErrors()) {
    $form['messages'] = [
      '#type' => 'status_messages',
      '#prefix' => '<div id="messages">',
      '#suffix' => '</div>',
    ];
    $response->addCommand(new ReplaceCommand('#payment_form', $form));
  }
  else {
    $training_id = $form_state->getValue('field_training')[0]['target_id'];
    $training = \Drupal::entityTypeManager()->getStorage('node')->load($training_id);
    $message = t("You have been registered for @class!", ['@class' => $training->getTitle()]);
    $response->addCommand(new OpenModalDialogCommand("Payment Successful", $message, ['width' => 800]));
    $response->addCommand(new RedirectCommand($training->toUrl()->toString()));
  }
  return $response;
}

/**
 * Modify the form element data field.
 */
function _allowed_formats_remove_textarea_help($form_element, FormStateInterface $form_state) {
  if (isset($form_element[0]['format'])) {
    // All this stuff is needed to hide the help text.
    unset($form_element[0]['format']['guidelines']);
    unset($form_element[0]['format']['help']);
    unset($form_element[0]['format']['#type']);
    unset($form_element[0]['format']['#theme_wrappers']);
    $form_element[0]['format']['format']['#access'] = FALSE;
  }

  return $form_element;
}

/**
 * Implements hook_entity_create_access().
 */
function badcamp_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  if ($entity_bundle == 'job_posting') {
    $sponsors = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
      'type' => 'sponsor',
      'field_members' => $account->id()
    ]);
    if (count($sponsors) > 0) {
      return \Drupal\Core\Access\AccessResult::allowed();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function badcamp_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'sponsor' && $view_mode == 'full') {
    $view = Views::getView('sponsor_items');
    $build['job_postings'] = $view->buildRenderable('sponsor_jobs');

    $view = Views::getView('sponsor_items');
    $build['events'] = $view->buildRenderable('sponsor_events');
  }
}

/**
 * Implements hook_theme().
 */
function badcamp_theme() {
  $theme = [];

  $theme['payment_button'] = [
    'variables' => [
      'description' => NULL,
      'payment_type' => NULL,
      'amount' => NULL,
      'button_label' => NULL,
      'entity_type' => NULL,
      'entity_id' => NULL,
      'button' => NULL,
      'footer' => NULL,
    ],
    'template' => 'payment_button',
  ];

  return $theme;
}

/**
 * Implements hook_entity_field_access().
 */
function badcamp_entity_field_access($operation, FieldDefinitionInterface $field_definition, $account, FieldItemListInterface $items = NULL) {
  if ($operation == 'view' && $account->isAuthenticated()) {
    if ($field_definition->getTargetEntityTypeId() == 'user' && $field_definition->getName() == 'mail') {
      return AccessResult::allowed();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function badcamp_preprocess_node(&$vars) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $vars['node'];
  if (in_array($node->bundle(), ['summit', 'training', 'event', 'session'])) {
    $totalCap = $node->get('field_register_capacity')->getString();
    if (empty($totalCap)) {
      // If empty string set to 0
      $totalCap = 0;
    }

    // If is set to above 0 get total flags.
    if ($totalCap > 0) {
      $flagging = \Drupal::service('flag.count')->getEntityFlagCounts($node);
      if (isset($flagging) && isset($flagging['add_to_schedule'])) {
        $totalCount = $flagging['add_to_schedule'];
        if ($totalCap < $totalCount) {
          $vars['content']['flag_add_to_schedule']['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function badcamp_preprocess_flag(&$vars) {
  $entity = $vars['flaggable'];

  if ($entity instanceof Node) {
    if (in_array($entity->bundle(), ['summit', 'training']) && $vars['action'] == 'flag') {
      $vars['title']['#markup'] = t('Register');
    }
    $vars['attributes']['title'] = t('@entity - @action', ['@action' => $vars['title']['#markup'], '@entity' => $entity->getTitle()]);
  }
}
